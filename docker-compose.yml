services:
  postgres:
    image: postgres:15
    container_name: hc_postgres_new
    restart: always
    environment:
      POSTGRES_USER: hc_user
      POSTGRES_PASSWORD: hc_password
      POSTGRES_DB: hc_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hc_frontend_new
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://gateway:8080
    depends_on:
      - gateway
    networks:
      - app-network

  gateway:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - ./gateway-service/.env
    depends_on:
      - postgres
    networks:
      - app-network


  dsdgen:
    build:
      context: ./dsdgen-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    env_file:
      - ./dsdgen-service/.env
    depends_on:
      - postgres
    volumes:
      - ./dart_documents:/app/app/dart_documents
    networks:
      - app-network

  dsdcheck:
    build:
      context: ./dsdcheck-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    volumes:
      - ./dsdcheck-service/app/resources:/app/app/resources
    env_file:
      - ./dsdcheck-service/.env
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
